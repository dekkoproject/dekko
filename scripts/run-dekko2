#! /bin/bash

set -e

BUILD_DIR=${BUILD_DIR:=../__dekko_build}
SRC_DIR=${PWD##*/}

for i in "$@"
do
case $i in
    --devmode)
    DEV_MODE=true
    shift
    ;;
    --messageserver)
    MS_RUN=true
    shift
    ;;
    --gdb)
    GDB_RUN=true
    shift
    ;;
    --clean)
    CLEAN=true
    shift
    ;;
    --connectivity-api)
    USE_CONNECTIVITY=true
    shift
    ;;
    --server-as-thread)
    SERVER_AS_THREAD=true
    shift
    ;;
    --valgrind)
    VALGRIND=true
    shift
    ;;
    *)
    ;;
esac
done

if ! which ninja > /dev/null; then
   echo -e "ninja-build not found! Install it now? (y/n) \c"
   read ninja
   echo "$ninja"
   if [ "$ninja" == "y" ]; then
      sudo apt-get install ninja-build
   else
      echo "This script currently only works with ninja build. either update it to work with gcc make or build it manually :-)"
      exit 1
   fi
fi
if ! which dpkg-architecture > /dev/null; then
   echo -e "dpkg-dev not found! Install it now? (y/n) \c"
   read da
   echo "$da"
   if [ "$da" == "y" ]; then
      sudo apt-get install dpkg-dev
   else
      echo "This script requires dpkg-architecture"
      exit 1
   fi
fi

HOST_ARCH="$(dpkg-architecture -qDEB_HOST_MULTIARCH)"

## Create build dir if it doesn't exist
if [ ! -d "$BUILD_DIR" ]; then
  mkdir ${BUILD_DIR}
fi
# enter it
cd ${BUILD_DIR}

if [ "$CLEAN" = true ]; then
  ninja clean
  exit 0
fi

if [ "$USE_CONNECTIVITY" = true ]; then
    cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DENABLE_LOGGING=on -DENABLE_QML_DEBUG=On -DENABLE_UBUNTU_CONNECTIVITY=On ../${SRC_DIR}
else
    cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DENABLE_LOGGING=on -DENABLE_QML_DEBUG=On ../${SRC_DIR}
fi
ninja -j4
export DESTDIR=./test
ninja -j4 install

export PATH=$PWD/test/lib/${HOST_ARCH}/bin:$PATH
export LD_LIBRARY_PATH=$PWD/test/lib/${HOST_ARCH}
export QML2_IMPORT_PATH=$LD_LIBRARY_PATH
export QMF_PLUGINS=$LD_LIBRARY_PATH/qmf/plugins5
export DEKKO_PLUGINS=$LD_LIBRARY_PATH/Dekko/plugins
echo "PATH: $PATH"
echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
echo "QMF_PLUGINS: $QMF_PLUGINS"

if [ "$MS_RUN" = true ]; then
  messageserver5
  exit 0
else
  if [ "$GDB_RUN" = true ]; then
    gdb dekko
    exit 0
  fi
  if [ "$VALGRIND" = true ]; then
    valgrind -v --tool=massif dekko
    exit 0
  fi

  if [ "$DEV_MODE" = true ]; then
    dekko -d $@
  else
    dekko $@
  fi
fi


